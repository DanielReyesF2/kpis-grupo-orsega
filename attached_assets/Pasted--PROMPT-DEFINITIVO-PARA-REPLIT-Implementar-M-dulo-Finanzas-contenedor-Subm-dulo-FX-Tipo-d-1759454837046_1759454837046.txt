✅ PROMPT DEFINITIVO PARA REPLIT

Implementar Módulo “Finanzas” (contenedor) + Submódulo “FX – Tipo de Cambio”
Stack: React + Node/Express + Postgres (Neon)
Objetivo: Añadir un módulo nuevo y escalable sin alterar módulos existentes. Submódulo inicial: FX (captura manual de TC por Lolita, snapshots de referencias MONEX/Santander/DOF en modo STUB, histórico, comparaciones, señales y export).

0) Reglas de oro (obligatorias)

No tocar código de otros módulos.

Todo lo nuevo vive bajo finanzas/ con subcarpetas por submódulo.

Feature flags:

FINANCE_MODULE_ENABLED (habilita/oculta módulo Finanzas completo)

FX_SUBMODULE_ENABLED (habilita/oculta solo FX)

RBAC existente: admin, direccion (solo lectura), lolita (captura/edición en ventana)

Zona horaria fija: America/Mexico_City

Migraciones idempotentes con UP/DOWN.

Auditoría de cambios.

Tests backend + frontend incluidos.

Entrega vía PR con checklist de aceptación.

1) Estructura de carpetas (exacta)
Backend
server/src/modules/finanzas/
  index.ts                # registro condicional del módulo por FINANCE_MODULE_ENABLED
  fx/
    controllers/
      fx.controller.ts
    routes/
      fx.routes.ts
    services/
      fx.service.ts
      fxRefs.service.ts   # adaptadores de proveedores (STUB/LIVE)
    models/
      fx.sql              # migraciones SQL (UP/DOWN)
    dto/
      fx.dto.ts           # tipos/validaciones de payloads
    utils/
      fx.validators.ts
      fx.authz.ts         # helpers de autorización por rol/ventana de edición
    __tests__/
      fx.e2e.test.ts

Frontend
client/src/modules/finanzas/
  index.ts                # registro de rutas/UI condicional por FINANCE_MODULE_ENABLED
  fx/
    pages/
      FxDashboard.tsx
    components/
      FxQuoteForm.tsx
      FxComparisonCards.tsx
      FxSignalsPanel.tsx
      FxIntradayTimeline.tsx
    hooks/
      useFx.ts
    services/
      fx.api.ts
    __tests__/
      FxDashboard.test.tsx

Integración mínima (sin romper nada)
client/src/app/FeatureFlags.ts         # agregar FINANCE_MODULE_ENABLED, FX_SUBMODULE_ENABLED
client/src/router/AppRoutes.tsx        # montar /finanzas y /finanzas/fx condicionalmente
client/src/nav/Menu.tsx                # item “Finanzas” y “Tipo de cambio (FX)” condicional
server/src/app.ts                      # registrar rutas de finanzas solo si flag ON

2) Variables de entorno (agregar a .env)
FINANCE_MODULE_ENABLED=true
FX_SUBMODULE_ENABLED=true
FX_PROVIDERS_MODE=STUB   # STUB (por defecto) | LIVE (dejar 501)
TZ=America/Mexico_City

3) Migraciones SQL (Neon/Postgres) — server/src/modules/finanzas/fx/models/fx.sql
-- ============================
-- UP
-- ============================
BEGIN;

CREATE EXTENSION IF NOT EXISTS pgcrypto;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'fx_provider') THEN
    CREATE TYPE fx_provider AS ENUM ('monex','santander','dof');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'fx_alert_type') THEN
    CREATE TYPE fx_alert_type AS ENUM ('intraday','vs_dof','moving_avg');
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS fx_quotes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ts_local TIMESTAMPTZ NOT NULL DEFAULT now(),
  buy_rate NUMERIC(10,4) NOT NULL CHECK (buy_rate > 0),
  sell_rate NUMERIC(10,4) NOT NULL CHECK (sell_rate > 0),
  source_label TEXT NULL,
  notes TEXT NULL,
  created_by UUID NOT NULL,
  locked_at TIMESTAMPTZ NULL
);

CREATE TABLE IF NOT EXISTS fx_refs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  fx_quote_id UUID NOT NULL REFERENCES fx_quotes(id) ON DELETE CASCADE,
  provider fx_provider NOT NULL,
  buy_rate NUMERIC(10,4) NOT NULL CHECK (buy_rate > 0),
  sell_rate NUMERIC(10,4) NOT NULL CHECK (sell_rate > 0),
  ts_ref TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS fx_settings (
  id BOOLEAN PRIMARY KEY DEFAULT TRUE,              -- singleton
  alert_delta_intraday_pct NUMERIC(5,2) NOT NULL DEFAULT 0.30,  -- 0.30%
  alert_delta_vs_dof_pct NUMERIC(5,2) NOT NULL DEFAULT 0.50,
  ma_window INTEGER NOT NULL DEFAULT 3
);

CREATE TABLE IF NOT EXISTS fx_alerts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  fx_quote_id UUID NOT NULL REFERENCES fx_quotes(id) ON DELETE CASCADE,
  type fx_alert_type NOT NULL,
  message TEXT NOT NULL,
  channels TEXT[] NOT NULL DEFAULT ARRAY['inapp'],
  ts_sent TIMESTAMPTZ NOT NULL DEFAULT now(),
  status TEXT NOT NULL DEFAULT 'sent'
);

-- auditoría genérica (si ya existe en otro módulo, no recrear; aquí defensivo)
CREATE TABLE IF NOT EXISTS audit_log (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  entity TEXT NOT NULL,
  entity_id UUID NOT NULL,
  action TEXT NOT NULL,              -- create|update|delete|settings
  by_user UUID NOT NULL,
  at TIMESTAMPTZ NOT NULL DEFAULT now(),
  diff_json JSONB
);

-- vistas útiles
CREATE OR REPLACE VIEW vw_fx_intraday_stats AS
SELECT
  date_trunc('day', ts_local) AS day,
  MIN(buy_rate) AS buy_low,
  MAX(buy_rate) AS buy_high,
  MIN(sell_rate) AS sell_low,
  MAX(sell_rate) AS sell_high,
  AVG(sell_rate) AS sell_avg
FROM fx_quotes
GROUP BY 1;

CREATE OR REPLACE VIEW vw_fx_best_actions AS
WITH last_q AS (
  SELECT * FROM fx_quotes ORDER BY ts_local DESC LIMIT 1
),
refs AS (
  SELECT r.*, q.buy_rate AS internal_buy, q.sell_rate AS internal_sell
  FROM last_q q
  JOIN fx_refs r ON r.fx_quote_id = q.id
)
SELECT
  (SELECT id FROM last_q) AS quote_id,
  (SELECT provider FROM refs ORDER BY buy_rate ASC LIMIT 1) AS best_buy_provider,
  (SELECT buy_rate  FROM refs ORDER BY buy_rate ASC LIMIT 1) AS best_buy_rate,
  (SELECT provider FROM refs ORDER BY sell_rate DESC LIMIT 1) AS best_sell_provider,
  (SELECT sell_rate FROM refs ORDER BY sell_rate DESC LIMIT 1) AS best_sell_rate;

COMMIT;

-- ============================
-- DOWN
-- ============================
BEGIN;
DROP VIEW IF EXISTS vw_fx_best_actions;
DROP VIEW IF EXISTS vw_fx_intraday_stats;
DROP TABLE IF EXISTS fx_alerts;
DROP TABLE IF EXISTS fx_settings;
DROP TABLE IF EXISTS fx_refs;
DROP TABLE IF EXISTS fx_quotes;
-- mantener audit_log si lo usan otros módulos
-- DROP TABLE IF EXISTS audit_log;
-- no dropear tipos si los usan otros módulos
-- DROP TYPE IF EXISTS fx_provider;
-- DROP TYPE IF EXISTS fx_alert_type;
COMMIT;

4) Backend — Rutas y contratos (Express)

Montaje condicional (server/src/modules/finanzas/index.ts):

Si FINANCE_MODULE_ENABLED !== 'true' → no registrar nada.

Dentro, si FX_SUBMODULE_ENABLED === 'true' → registrar fx.routes.ts.

Rutas /finanzas/fx (todas protegidas por RBAC):

POST /finanzas/fx/quotes — Crear cotización (Lolita/Admin)
Body:

{ "buy_rate": 17.2345, "sell_rate": 17.4599, "source_label": "Mesa Tesorería", "notes": "apertura" }


Reglas:

buy_rate < sell_rate

0 < tasas < 1000

Duplicado suave: si ±0.0001 y <2min vs última → 409 con mensaje
Acción:

Insert fx_quotes

fxRefs.service.getSnapshots() → inserta 3 fx_refs (monex, santander, dof) en modo STUB

Calcular señales (intraday, vs DOF, moving_avg) y persistir en fx_alerts
Respuesta 201:

{ "quote": {...}, "refs": [...], "signals": {...} }


GET /finanzas/fx/quotes?date=YYYY-MM-DD — Listar intradía (Dirección/Lolita/Admin)
Respuesta: arreglo con { quote, refs, deltas } (deltas vs anterior y vs refs).

GET /finanzas/fx/summary/today — Resumen del día
Incluye: última cotización, high/low intradía, MA(n), mejor proveedor para comprar y vender y explicación (spread vs 2º).

PUT /finanzas/fx/quotes/:id — Editar

Permitido para lolita si <10min desde ts_local, si no solo admin.

Registrar cambios en audit_log.

DELETE /finanzas/fx/quotes/:id — Eliminar (solo admin, requiere reason)

Guardar diff_json en audit_log.

GET /finanzas/fx/settings / PUT /finanzas/fx/settings — Umbrales (solo admin)
Payload:

{ "alert_delta_intraday_pct": 0.30, "alert_delta_vs_dof_pct": 0.50, "ma_window": 3 }


GET /finanzas/fx/export?from=YYYY-MM-DD&to=YYYY-MM-DD — CSV
Encabezados:

ts_local,buy_rate,sell_rate,monex_buy,monex_sell,santander_buy,santander_sell,dof_buy,dof_sell,source_label,notes


Servicios clave

fx.service.ts

createQuote(payload, user)

listQuotesByDate(date)

getTodaySummary()

updateQuote(id, payload, user)

deleteQuote(id, reason, user)

computeSignals(quote, refs, settings, prevQuote)

fxRefs.service.ts

getSnapshots()

FX_PROVIDERS_MODE=STUB: generar buy/sell por proveedor con jitter ±0.10% sobre interna

FX_PROVIDERS_MODE=LIVE: devolver 501 Not Implemented (placeholder limpio)

Autorización (fx.authz.ts)

canCreateQuote(user: Role) → lolita|admin

canEditQuote(user, quote) → lolita si <10min, o admin

canDeleteQuote(user) → admin

Validaciones (fx.validators.ts)

buy_rate < sell_rate, rango (0,1000)

antirepe (±0.0001 & <2min)

Señales (pseudocódigo)

delta_intraday = (curr.sell - prev.sell)/prev.sell
if |delta_intraday| >= X% -> alerta 'intraday'

delta_vs_dof_buy  = (curr.buy - dof.buy)/dof.buy
delta_vs_dof_sell = (curr.sell - dof.sell)/dof.sell
if |delta_vs_dof_*| >= Y% -> alerta 'vs_dof'

ma_n = avg(last n sell) ; delta_ma = (curr.sell - ma_n)/ma_n
if |delta_ma| >= Z% -> alerta 'moving_avg'

best_buy  = min(buy among {monex,santander,dof,curr})
best_sell = max(sell among {monex,santander,dof,curr})

5) Frontend — Rutas y componentes

Montaje (client/src/modules/finanzas/index.ts):

Si FINANCE_MODULE_ENABLED !== true → no agregar rutas/menú.

Si FX_SUBMODULE_ENABLED === true → registrar /finanzas/fx.

Ruta protegida: /finanzas (wrapper del módulo) → /finanzas/fx (submódulo FX).

Pantallas/Componentes

FxDashboard.tsx

Header del día: última cotización (compra/venta, hora), badges de Δ intradía vs anterior.

Botón “Nueva cotización” (visible solo lolita|admin).

FxComparisonCards: 3 tarjetas (MONEX/Santander/DOF) con Δ% vs interna y sello “Me conviene” para comprar/vender.

FxSignalsPanel: “Comprar ahora” / “Vender ahora” + explicación (proveedor ganador, spread vs 2º), high/low intradía y MA(n).

FxIntradayTimeline: listado intradía con mini sparkline.

Selector de fecha + Export CSV.

FxQuoteForm.tsx

Campos: buy_rate, sell_rate, source_label?, notes?

Validaciones UI: buy<sell, rangos razonables, feedback claro.

Submit → POST /finanzas/fx/quotes + toast + refrescar.

Hook useFx.ts

useFxTodaySummary(), useFxQuotesByDate(date), useCreateQuote(), useExportCsv()

Revalidación ligera cada 60–90 s (evitar polling agresivo).

API fx.api.ts

Métodos fetch/axios tipados; manejo de errores 400/409 con mensajes UX.

UX copy (breve)

Éxito: “Cotización guardada.”

Error validación: “La compra debe ser menor a la venta.”

Duplicado: “Cotización repetida en <2 min. ¿Forzar de todos modos?”

6) Accesibilidad, rendimiento y seguridad

Inputs con etiquetas, atajos de teclado en formulario, focus states.

Evitar bloqueos de UI; loaders discretos.

Sanitizar payloads en backend; limitar POST /quotes a 20/min por usuario.

Logs sin datos sensibles.

7) Pruebas

Backend fx.e2e.test.ts

Crear cotización válida → 201, crea 3 refs.

Rechazar buy>=sell → 400.

Duplicado ±0.0001 & <2min → 409.

Señales: forzar umbral y verificar inserción fx_alerts.

Edición <10min (lolita) → 200; >10min solo admin.

Export CSV (rango) → 200 con headers correctos.

Frontend FxDashboard.test.tsx

Render con flags ON/OFF (no montar con OFF).

Form valida buy<sell y muestra error.

Tarjetas muestran Δ% correcto.

Señal “Comprar ahora” aparece al cumplirse condiciones.

8) Criterios de aceptación (QA)

FINANCE_MODULE_ENABLED=false → no aparece menú “Finanzas” ni rutas asociadas.

FINANCE_MODULE_ENABLED=true y FX_SUBMODULE_ENABLED=false → aparece “Finanzas” pero no “FX”.

FINANCE_MODULE_ENABLED=true y FX_SUBMODULE_ENABLED=true → /finanzas/fx operativo:

Lolita captura múltiples cotizaciones en el día.

Dirección ve comparaciones, señales y export funcional.

Sin regressions en módulos existentes (build OK, rutas previas intactas).

9) Plan de despliegue seguro

Aplicar fx.sql (UP) en Neon.

Deploy con FINANCE_MODULE_ENABLED=false (smoke test).

Activar en staging: FINANCE_MODULE_ENABLED=true, FX_SUBMODULE_ENABLED=true → QA E2E.

Activar en producción en horario hábil.

Monitorear logs/telemetría 24 h.

10) Semillas y datos de prueba (opcional)

Script que inserte 3 cotizaciones del día (08:30, 12:00, 16:30) con STUB refs y fx_settings por defecto.

11) Telemetría y auditoría

Métricas: finance.fx.quote.created, finance.fx.alert.sent, finance.fx.dashboard.viewed

audit_log: create/update/delete/settings con diff_json.

12) Checklist de PR (pegar en la descripción)

 Flags respetadas (FINANCE_MODULE_ENABLED, FX_SUBMODULE_ENABLED)

 Rutas nuevas solo bajo /finanzas y /finanzas/fx

 Zero changes fuera de modules/finanzas/ + integraciones mínimas (router/menu/app)

 Migraciones UP/DOWN probadas

 Tests backend/ frontend pasan

 Linter/Build OK

 CSV export ok

 RBAC y ventana de edición verificados

 Documentación breve de endpoints incluida

13) Notas para futuro (no implementar ahora)

FX_PROVIDERS_MODE=LIVE: integrar scraping/API oficiales (con timeouts y caching).

Submódulos siguientes: finanzas/comprobantes/, finanzas/settings/, finanzas/indicadores/.

REPLIT: Implementa exactamente lo anterior. Mantén el código aislado en server/src/modules/finanzas/ y client/src/modules/finanzas/. No modifiques otros módulos. Entrega con pruebas y PR siguiendo la Checklist de PR.