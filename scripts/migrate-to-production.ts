#!/usr/bin/env tsx
// Script para migrar todos los datos de Development a Production
import { neon } from '@neondatabase/serverless';

// Este script debe ejecutarse CON LA DATABASE_URL DE PRODUCCI√ìN
async function migrateToProduction() {
  const dbUrl = process.env.DATABASE_URL;
  
  if (!dbUrl) {
    console.error('‚ùå DATABASE_URL no encontrada');
    process.exit(1);
  }

  console.log('üöÄ Iniciando migraci√≥n a producci√≥n...');
  console.log(`üìä Conectando a: ${dbUrl.substring(0, 30)}...`);
  
  const sql = neon(dbUrl);

  try {
    // 1. Verificar estado actual
    const companies = await sql`SELECT COUNT(*) as count FROM companies`;
    const areas = await sql`SELECT COUNT(*) as count FROM areas`;
    const kpis = await sql`SELECT COUNT(*) as count FROM kpis`;
    const users = await sql`SELECT COUNT(*) as count FROM users`;
    
    console.log('\nüìä Estado actual de la base de datos:');
    console.log(`   Companies: ${companies[0].count}`);
    console.log(`   Areas: ${areas[0].count}`);
    console.log(`   KPIs: ${kpis[0].count}`);
    console.log(`   Users: ${users[0].count}`);

    // 2. Insertar/actualizar companies
    console.log('\nüìä Insertando companies...');
    await sql`
      INSERT INTO companies (id, name, description, sector) VALUES
        (1, 'Dura International', 'Empresa l√≠der en la industria qu√≠mica', 'Qu√≠mica'),
        (2, 'Grupo Orsega', 'Empresa especializada en productos qu√≠micos', 'Qu√≠mica')
      ON CONFLICT (id) DO UPDATE SET
        name = EXCLUDED.name,
        description = EXCLUDED.description,
        sector = EXCLUDED.sector
    `;

    // 3. Insertar/actualizar areas (todas las 12)
    console.log('üè¢ Insertando areas...');
    await sql`
      INSERT INTO areas (id, name, description, "companyId") VALUES
        (1, 'Ventas', '√Årea de Ventas para Dura International', 1),
        (2, 'Log√≠stica', '√Årea de Log√≠stica para Dura International', 1),
        (3, 'Contabilidad y Finanzas', '√Årea de Contabilidad y Finanzas para Dura International', 1),
        (4, 'Ventas', '√Årea de Ventas para Grupo Orsega', 2),
        (5, 'Log√≠stica', '√Årea de Log√≠stica para Grupo Orsega', 2),
        (6, 'Contabilidad y Finanzas', '√Årea de Contabilidad y Finanzas para Grupo Orsega', 2),
        (7, 'Compras', '√Årea de Compras para Dura International', 1),
        (8, 'Almac√©n', '√Årea de Almac√©n para Dura International', 1),
        (9, 'Tesorer√≠a', '√Årea de Tesorer√≠a para Dura International', 1),
        (10, 'Compras', '√Årea de Compras para Grupo Orsega', 2),
        (11, 'Almac√©n', '√Årea de Almac√©n para Grupo Orsega', 2),
        (12, 'Tesorer√≠a', '√Årea de Tesorer√≠a para Grupo Orsega', 2)
      ON CONFLICT (id) DO UPDATE SET
        name = EXCLUDED.name,
        description = EXCLUDED.description,
        "companyId" = EXCLUDED."companyId"
    `;

    // 4. Insertar usuarios esenciales (admin y colaboradores)
    console.log('üë• Insertando usuarios...');
    await sql`
      INSERT INTO users (id, email, password, name, role, "companyId", "areaId") VALUES
        (23, 'daniel@econova.com.mx', '$2b$10$YourHashedPasswordHere', 'Daniel Martinez', 'admin', NULL, NULL),
        (2, 'omar@econova.com.mx', '$2b$10$YourHashedPasswordHere', 'Omar Navarro', 'collaborator', 2, 4),
        (3, 'mario@econova.com.mx', '$2b$10$YourHashedPasswordHere', 'Mario Reynoso', 'collaborator', 2, 6)
      ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        name = EXCLUDED.name,
        role = EXCLUDED.role,
        "companyId" = EXCLUDED."companyId",
        "areaId" = EXCLUDED."areaId"
    `;

    // 5. Insertar TODOS los KPIs (necesitar√°s copiar todos de desarrollo)
    console.log('üìà Insertando KPIs...');
    
    // IMPORTANTE: Aqu√≠ van TODOS tus KPIs. Por ahora pongo los b√°sicos
    // Necesitar√°s copiarlos todos de tu base de desarrollo
    await sql`
      INSERT INTO kpis (id, name, description, "areaId", "companyId", unit, target, frequency, "calculationMethod", responsible, "invertedMetric") VALUES
        -- KPIs de Grupo Orsega (Contabilidad)
        (2, 'Precisi√≥n en estados financieros', 'Mide la exactitud de los estados financieros generados', 6, 2, '%', '100%', 'monthly', 'Conteo de errores y salvedades', 'Mario Reynoso', false),
        (4, 'Velocidad de rotaci√≥n de cuentas por cobrar', 'Mide el tiempo promedio para cobrar cuentas pendientes', 6, 2, 'd√≠as', '60 d√≠as', 'monthly', 'Promedio de d√≠as para cobrar', 'Mario Reynoso', true),
        (6, 'Cumplimiento de obligaciones fiscales', 'Monitoreo mediante checklist para la presentaci√≥n de impuestos', 6, 2, '%', '100%', 'monthly', 'Checklist de obligaciones fiscales', 'Mario Reynoso', false),
        (8, 'Facturaci√≥n sin errores', 'Mide la precisi√≥n en la generaci√≥n de facturas', 6, 2, '%', '100%', 'weekly', '(Facturas sin errores / Total de facturas) x 100', 'Mario Reynoso', false),
        
        -- KPIs de Grupo Orsega (Ventas)
        (10, 'Volumen de ventas alcanzado', 'Volumen de ventas en unidades', 4, 2, 'unidades', '10.300.476 unidades', 'monthly', 'Suma de unidades vendidas en el per√≠odo', 'Omar Navarro', false),
        
        -- KPIs de Dura International (Ventas)
        (1, 'Volumen de ventas alcanzado', 'Volumen de ventas en KG', 1, 1, 'KG', '800.097 KG', 'monthly', 'Suma de kilogramos vendidos en el per√≠odo', 'Responsable Dura', false)
        
        -- NOTA: Aqu√≠ debes agregar TODOS los dem√°s KPIs de tu sistema
      ON CONFLICT (id) DO UPDATE SET
        name = EXCLUDED.name,
        description = EXCLUDED.description,
        "areaId" = EXCLUDED."areaId",
        "companyId" = EXCLUDED."companyId",
        unit = EXCLUDED.unit,
        target = EXCLUDED.target,
        frequency = EXCLUDED.frequency,
        "calculationMethod" = EXCLUDED."calculationMethod",
        responsible = EXCLUDED.responsible,
        "invertedMetric" = EXCLUDED."invertedMetric"
    `;

    // 6. Verificar resultado final
    const finalCompanies = await sql`SELECT COUNT(*) as count FROM companies`;
    const finalAreas = await sql`SELECT COUNT(*) as count FROM areas`;
    const finalKpis = await sql`SELECT COUNT(*) as count FROM kpis`;
    const finalUsers = await sql`SELECT COUNT(*) as count FROM users`;
    
    console.log('\n‚úÖ Migraci√≥n completada exitosamente!');
    console.log('üìä Estado final:');
    console.log(`   Companies: ${finalCompanies[0].count}`);
    console.log(`   Areas: ${finalAreas[0].count}`);
    console.log(`   KPIs: ${finalKpis[0].count}`);
    console.log(`   Users: ${finalUsers[0].count}`);

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    process.exit(1);
  }
}

migrateToProduction();
